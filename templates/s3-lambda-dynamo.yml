AWSTemplateFormatVersion: '2010-09-09'
Description: 'S3, Lambda, and DynamoDB stack with proper permissions'

Parameters:
  BucketName:
    Type: String
    Description: Name of the S3 bucket
  LambdaName:
    Type: String
    Description: Name of the Lambda function
  DynamoTableName:
    Type: String
    Description: Name of the DynamoDB table

Resources:
  # DynamoDB Table
  ProcessingTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Ref DynamoTableName
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: s3_key
          AttributeType: S
      KeySchema:
        - AttributeName: s3_key
          KeyType: HASH

  # CloudWatch Log Group
  LambdaLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub '/aws/lambda/${LambdaName}'
      RetentionInDays: 14

  # IAM Role for Lambda
  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub '${LambdaName}-role'
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: LambdaS3DynamoPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - s3:GetObject
                  - s3:HeadObject
                Resource: !Sub 'arn:aws:s3:::${BucketName}/*'
              - Effect: Allow
                Action:
                  - dynamodb:PutItem
                Resource: !GetAtt ProcessingTable.Arn
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: 'arn:aws:logs:*:*:*'

  # Lambda Function
  ProcessingLambda:
 
      Environment:
        Variables:
          DDB_TABLE: !Ref DynamoTableName
      Code:
        ZipFile: |
          # minimal placeholder code
          import json
          def handler(event, context):
            return {"message": "Placeholder deployed."}

  # CRITICAL: Lambda permission to allow S3 to invoke it
  LambdaInvokePermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref ProcessingLambda
      Action: lambda:InvokeFunction
      Principal: s3.amazonaws.com
      SourceArn: !Sub 'arn:aws:s3:::${BucketName}'

  # S3 Bucket (depends on Lambda permission)
  ProcessingBucket:
    Type: AWS::S3::Bucket
    DependsOn: LambdaInvokePermission
    Properties:
      BucketName: !Ref BucketName
      NotificationConfiguration:
        LambdaConfigurations:
          - Function: !GetAtt ProcessingLambda.Arn
            Event: s3:ObjectCreated:*

  # CloudWatch Monitoring
  LambdaErrorMetricFilter:
    Type: AWS::Logs::MetricFilter
    Properties:
      LogGroupName: !Ref LambdaLogGroup
      FilterPattern: '"ERROR"'
      MetricTransformations:
        - MetricNamespace: S3Processing
          MetricName: LambdaErrors
          MetricValue: '1'

  LambdaErrorsAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: !Sub '${LambdaName}-Errors'
      AlarmDescription: 'Alarm when Lambda has errors'
      MetricName: LambdaErrors
      Namespace: S3Processing
      Statistic: Sum
      Period: 300
      EvaluationPeriods: 1
      Threshold: 1
      ComparisonOperator: GreaterThanOrEqualToThreshold
      AlarmActions: []

Outputs:
  BucketName:
    Description: 'Name of the S3 bucket'
    Value: !Ref ProcessingBucket
  LambdaFunction:
    Description: 'Lambda function name'
    Value: !Ref ProcessingLambda
  DynamoTable:
    Description: 'DynamoDB table name'
    Value: !Ref ProcessingTable